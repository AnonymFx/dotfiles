" Default location: ~/.vimrc

" ------------------------------------------------------------------------------
" ---------------------------------- Plugins -----------------------------------
" ------------------------------------------------------------------------------
"
" --------------------------------- Vim-Plug -----------------------------------
" Specify plugin directory
call plug#begin('~/.vim/plugins')

" fuzzy finding
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'mileszs/ack.vim'

" Git dots
Plug 'airblade/vim-gitgutter'

" NERDTree - File Explorer
Plug 'scrooloose/nerdtree'
" NERDTree git icons
Plug 'Xuyuanp/nerdtree-git-plugin'

" ALE Linter
Plug 'w0rp/ale'

" Airline - Status line
Plug 'vim-airline/vim-airline'
" Airline themes
Plug 'vim-airline/vim-airline-themes'

" Unimpaired - useful keybindings
Plug 'tpope/vim-unimpaired'

" Better repeat with . e.g. for maps or other plugins
Plug 'tpope/vim-repeat'

" Change surroundings of text elements
Plug 'tpope/vim-surround'

" Comment and uncomment lines
Plug 'tpope/vim-commentary'

" Autoformat files
Plug 'Chiel92/vim-autoformat'

" Better navigation between tmux and vim
Plug 'christoomey/vim-tmux-navigator'

" TableMode - Table creation for vim
Plug 'dhruvasagar/vim-table-mode'

" One color scheme
Plug 'rakr/vim-one'

" Language support for over 100 languages
Plug 'sheerun/vim-polyglot'

" Latex suite
Plug 'vim-latex/vim-latex', {'for': 'tex'}

" Init plugin system
call plug#end()

" ------------------------------------------------------------------------------
" --------------------------------- Key bindings -------------------------------
" ------------------------------------------------------------------------------

set timeoutlen=500
set ttimeoutlen=10
let mapleader=" "
noremap \ "

" New line without insert
nnoremap <leader>o o<Esc>k
nnoremap <leader>O O<ESC>j

" Keybinding for yanking and pasting from system keyboard
noremap <leader>p "+p
noremap <leader>P "+P
noremap <leader>y "+y
noremap <leader>d "+d

" resize horizontal splits
nnoremap <leader>hr :resize
"resize vertical splits
nnoremap <leader>vr :vertical resize

" Forward and backward movement in command mode
cnoremap <C-h> <Left>
cnoremap <C-l> <Right>
cnoremap <C-k> <Up>
cnoremap <C-j> <Down>

" Set spell check language to German/English respectively
nnoremap <silent> <leader>en :set spelllang=en<CR>
nnoremap <silent> <leader>de :set spelllang=de_de<CR>

" Toggle highlight search
noremap <leader>hls :set hls!<CR>

nnoremap <leader>spot :%s/(ft.*)//ge <bar> %s/(feat.*)//ge <bar> %s/\[.*\]//ge <bar> %s/&\s.*-/-/ge <bar> %s/\sx\s.*-/-/ge <bar> %s/ft.*\s-/-/ge <bar> %s/feat.*\s -/-/ge <bar> %y+<CR>

" ------------------------------------------------------------------------------
" ------------------------------ Plugin Settings -------------------------------
" ------------------------------------------------------------------------------

" Ack/Ag -----------------------------------------------------------------------
if executable('ag')
	let g:ackprg = 'ag --vimgrep'
endif
nnoremap <leader>/ :Ack!<space>

" --------------------------------- Airline ------------------------------------
set laststatus=2 " show always
let g:airline_powerline_fonts = 1 " powerline font

" ---------------------------- autoformat --------------------------------------
nnoremap <leader>af :Autoformat<CR>
augroup AutoFormat
	autocmd!
	autocmd FileType markdown let g:autoformat_remove_trailing_spaces=0
augroup END


" fzf --------------------------------------------------------------------------
let $FZF_DEFAULT_COMMAND = 'ag -g ""'
nnoremap <leader>bu :Buffers<CR>
nnoremap <C-p> :Files<CR>
imap <c-n>f <plug>(fzf-complete-file-ag)
nnoremap <silent> <leader>gl :BLines<CR>

" gitgutter --------------------------------------------------------------------
set updatetime=100

" -------------------------------- NERDTree ------------------------------------
let g:NERDTreeIgnore = ['bin', 'node_modules']
let g:NERDTreeMapJumpNextSibling = '<leader>j'
let g:NERDTreeMapJumpPreviousSibling = '<leader>k'
nnoremap <silent> <leader>nt :NERDTreeToggle<CR>

" ------------------------------ Table Mode ------------------------------------
let g:table_mode_header_fillchar= '-'
let g:table_mode_corner="|"
nnoremap <leader>at :TableModeRealign<CR>

" ------------------------------ Vim-Latex -------------------------------------
let g:tex_flavor = 'latex'
set grepprg=grep\ -nH\ $*
set iskeyword+=:
let g:tex_indent_items = 0

" Better and more latex environment insertions
let g:Tex_Env_figure="\\begin{figure}[<+htpb+>]\<CR>\\caption{<+caption text+>}\\label{fig:<+label+>}\<CR>\\end{figure}<++>"
" IMAP is a function provided by vim-latex which is an alternative for imap
" and also matches if you don't type in the chars in the exact sequence
" indicated
augroup VimLatex
	autocmd!
	autocmd FileType tex call IMAP('EGR', "\\begin{figure}[<+htpb+>]\<CR>\\centering\<CR>\\includegraphics[<+figopt+>]{<+file+>}\<CR>\\caption{<+caption text+>}\\label{fig:<+label+>}\<CR>\\end{figure}<++>", 'tex')
	autocmd FileType tex call IMAP('DIT', '\item[<+label+>] <++>', 'tex')
	autocmd FileType tex call IMAP('IT', '\item <++>', 'tex')
	autocmd FileType tex imap <buffer> <C-j> <Plug>IMAP_JumpForward
augroup END

" Vim-markdown -----------------------------------------------------------------
let g:vim_markdown_toc_autofit = 1
augroup VimMarkdown
	autocmd!
	autocmd FileType markdown set conceallevel=3
	autocmd FileType markdown nnoremap <silent> <leader>tb :Toc<CR>
augroup END
let g:vim_markdown_auto_insert_bullets = 0
let g:vim_markdown_new_list_item_indent = 0
let g:vim_markdown_folding_disabled = 1

" Vim-tmux-navigator -----------------------------------------------------------
" Override vim-latex binding, for some reason both lines are necessary for
" also enabling resourcing the vimrc
augroup  VimTmux
	autocmd!
	autocmd FileType tex nnoremap <silent> <C-j> :TmuxNavigateDown<CR>
augroup END
nnoremap <silent> <C-j> :TmuxNavigateDown<CR>

" ------------------------------------------------------------------------------
" --------------------------------- General ------------------------------------
" ------------------------------------------------------------------------------

" syntax highlighting
syntax on

" spell check
set spell

" (relative) line numbers
set number
set relativenumber

" Indent configuration
filetype plugin indent on
set autoindent
set breakindent

" Show trailing whitespaces
set listchars=tab:•\ ,trail:•,extends:»,precedes:«
set invlist

" Search
set ignorecase
set smartcase

" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
nnoremap z/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
	let @/ = ''
	if exists('#auto_highlight')
		autocmd! auto_highlight
		augroup! auto_highlight
		echo 'Highlight current word: off'
		return 0
	else
		augroup auto_highlight
			au!
			au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
		augroup end
		echo 'Highlight current word: ON'
		return 1
	endif
endfunction

" folding
set foldmethod=syntax
set foldlevelstart=100
let javaScript_fold=1         " JavaScript
let perl_fold=1               " Perl
let php_folding=1             " PHP
let r_syntax_folding=1        " R
let ruby_fold=1               " Ruby
let sh_fold_enabled=1         " sh
let vimsyn_folding='af'       " Vim script
let xml_syntax_folding=1      " XML

" Scrolling
set scrolloff=3 " Keep 3 lines below and above the cursor

" Open splits on the right of existing ones
set splitright
" Open splits below existing ones
set splitbelow

" Enabling mouse scrolling
set mouse=a

" Show as much as possible of a wrapped last line, not just "@".
set display=lastline

" Automatically resize splits when the window gets resized
augroup  BufferResize
	autocmd!
	autocmd VimResized * wincmd =
augroup END

" ------------------------------------------------------------------------------
" ---------------------------------- Appearance --------------------------------
" ------------------------------------------------------------------------------
" Good color alts: monokai (sublime default), one (atom default), OceanicNext
augroup MyColors
	autocmd!
	autocmd ColorScheme * highlight Normal ctermbg='none'
				\ | highlight SpellBad cterm=underline ctermbg=88
				\ | highlight Comment ctermfg=246
				\ | highlight LineNr ctermfg=246
augroup END

set background=dark
color one
let g:airline_theme='one' " reset nice airline theme


" ------------------------------------------------------------------------------
" ------------------------- Filetype specific stuff ----------------------------
" ------------------------------------------------------------------------------
" ------------------ Javascript ------------------
autocmd FileType javascript setlocal tabstop=4

" ------------------ Markdown --------------------
autocmd FileType markdown setlocal foldmethod=indent

" ------------------ Scratchpad ------------------
autocmd BufNewFile,BufRead *.scratchpad* setlocal foldlevel=0

" ------------------ Python ----------------------
autocmd FileType python let python_highlight_all=1
autocmd FileType python setlocal tabstop=4
autocmd FileType python setlocal softtabstop=4
autocmd FileType python setlocal shiftwidth=4
autocmd FileType python setlocal textwidth=80
autocmd FileType python setlocal expandtab
autocmd FileType python setlocal autoindent
autocmd FileType python setlocal fileformat=unix

" --------------------- Tex ----------------------
augroup TexMappings
	autocmd!
	autocmd FileType tex nmap <C-r>b :w<CR>:!make<CR>
augroup END
autocmd FileType tex setlocal spell
autocmd FileType tex setlocal foldlevel=100
" Automatically enter a comment leader when hitting Enter or o/O
autocmd FileType tex setlocal formatoptions+=ro


" ------------------------------------------------------------------------------
" ------------------------------- Functions ------------------------------------
" ------------------------------------------------------------------------------
function! s:DiffWithSaved()
	let filetype=&ft
	diffthis
	vnew | r # | normal! 1Gdd
	diffthis
	exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()

function! RunMake()
	if filereadable("Makefile")
		make!
	endif
endfunction
nmap <silent> <C-r>b :call RunMake()<CR>
