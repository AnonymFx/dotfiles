# Default location: ~/.zshrc
# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
SPACESHIP_PROMPT_ORDER=( time user dir host git exec_time line_sep jobs exit_code char )
ZSH_THEME="spaceship"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
export UPDATE_ZSH_DAYS=5

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)
plugins=(git colored-man-pages zsh-autosuggestions zsh-syntax-highlighting gitfast common-aliases sudo wd)

# User configuration

export PATH="$HOME/bin:${PATH}:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/lib/jvm/default/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/opt/android-sdk-linux/platform-tools"
# export MANPATH="/usr/local/man:$MANPATH"

# Check for system update if script is in PATH
if system_update_script="$(type -p system-update-prompt)" && [ -n "$system_update_script" ]; then
	# Set the amount of days past for system update prompt
	export UPDATE_SYSTEM_DAYS=5
	# Run the script
	system-update-prompt
fi


source $ZSH/oh-my-zsh.sh
autoload -U zmv
setopt extendedglob
setopt vi

# Load custom auto-complete suggestions
fpath=($HOME/.zsh-completions $fpath)
if type brew &>/dev/null
then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"

  autoload -Uz compinit
  compinit
fi

compinit

# Set 256 colors
export TERM="xterm-256color"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
	export EDITOR='vim'
else
	export EDITOR='vim'
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

if fzf="$(type -p fzf)" && [ -n "$fzf" ] && ag="$(type -p ag)" && [ -n "$ag" ]; then
	fzf_bindings_location="$(find /opt/homebrew/Cellar/fzf -iname '*key-bindings.zsh')"
	source "$fzf_bindings_location"
	fzf_completion_location="$(find /opt/homebrew/Cellar/fzf -iname '*completion.zsh')"
	source "$fzf_completion_location"

	if fd_l="$(type -p fd)" && [ -n "$fd_l" ]; then
		FD_OPTIONS="--follow"
		export FZF_CTRL_T_COMMAND="fd $FD_OPTIONS"
		export FZF_ALT_C_COMMAND="fd --type d $FD_OPTIONS"
	else
		export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
		export FZF_ALT_C_COMMAND="$FZF_DEFAULT_COMMAND"
	fi
	export FZF_DEFAULT_OPTS=" --color fg:242,bg:236,hl:65,fg+:15,bg+:239,hl+:108 --color info:108,prompt:109,spinner:108,pointer:168,marker:168 --preview='[[ \$(file --mime {}) =~ binary ]] && echo {} is a binary file || (bat --style=numbers --color always {} || cat {} ) 2> /dev/null | head -300' --preview-window='right:wrap' --bind='f3:execute(bat --sytle=numbers {} || less -f {}),f2:toggle-preview,ctrl-d:half-page-down,ctrl-u:half-page-up,ctrl-a:select-all+accept,ctrl-y:execute-silent(echoe {+} | pbcopy)'"
	export FZF_COMPLETION_TRIGGER=''
	bindkey '^N' fzf-completion
	bindkey '^I' $fzf_default_completion
fi

if [[ -e /usr/share/z.lua/z.lua ]]; then
	eval "$(lua /usr/share/z.lua/z.lua --init zsh)"
fi

alias zz='z -c'      # restrict matches to subdirs of $PWD
alias zi='z -i'      # cd with interactive selection
alias zf='z -I'      # use fzf to select in multiple matches
alias zb='z -b'      # quickly cd to the parent directory

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Disable interactive mode (set by plugin 'common-aliases') for
# basic commands
unalias rm
unalias mv
unalias cp

alias cd..='cd ..'

alias mmv='noglob zmv -W'

# pacman ###############################
if pacman_l="$(type -p pacman)" && [ -n "$pacman_l" ]; then
	alias paccc='sudo pacman -Sc'
fi

if yay_l="$(type -p yay)" && [ -n "$yay_l" ]; then
	alias yayupg='yay --combinedupgrade -Syu'
	alias yayin='yay -S'
	alias yayins='yay -U'
	alias yayrem='yay -Rns'
	alias yayre='yay -R'
fi

# vim ##################################
if gvim_l="$(type -p gvim)" && [ -n "$gvim_l" ]; then
	alias gv='gvim --remote-silent'
	alias gvn='gvim -c NERDTree'
fi
if vim_l="$(type -p vim)" && [ -n "$vim_l" ]; then
	alias vin='vim -c NERDTree'
	alias vi='vim'
fi

# git ##################################
if git_l="$(type -p git)" && [ -n "$git_l" ]; then
	alias gdt='git difftool'
	alias gwa='git worktree add'
	alias gwr='git worktree remove'
fi

# xdg-open #############################
if xdg_open_l="$(type -p xdg-open)" && [ -n "$xdg_open_l" ]; then
	alias open='xdg-open 2>/dev/null 1>&2'
fi

# dedicated graphics card ##############
if optirun_l="$(type -p optirun)" && [ -n "$optirun_l" ]; then
	alias gpu='optirun'
else
	alias gpu='DRI_PRIME=1'
fi


# Google Drive
if drive_l="$(type -p drive)" && [ -n "$drive_l" ]; then
	alias dup='drive pull'
	alias dupnp='drive pull -no-prompt'
	alias dp='drive push'
	alias dpnp='drive push -no-promt'
	alias ddi='drive diff -skip-content-check'
fi

# tmux
if tmux_l="$(type -p tmux)" && [ -n "$tmux_l" ]; then
	alias tmux='TERM=xterm-256color tmux'
	alias tks='tmux kill-session -t'
	alias ta='tmux attach -t'
	alias tls='tmux ls'
	alias tns='tmux new-session -d -s'
fi

# adb
if adb_l="$(type -p adb)" && [ -n "$adb_l" ]; then
	alias adbba="adb backup -apk -obb -all -f"
	alias adbb="adb backup -apk -obb -f"
	alias adblp='adb shell "pm list packages -f"'
fi

# rsync ################################
if rsync_l="$(type -p rsync)" && [ -n "$rsync_l" ]; then
	alias rscp='rsync --progress -avz -e ssh'
	alias pcp='rsync --info=progress2'
fi

# exa ##################################
if exa_l="$(type -p exa)" && [ -n "$exa_l" ]; then
	alias la='exa -lag --group-directories-first'
	alias l='exa -lg --group-directories-first'
fi

# ag ###################################
if ag_l="$(type -p ag)" && [ -n "$ag_l" ]; then
	alias ag='ag --color -S'
	alias -g AG='| ag'
fi

# ag ###################################
if docker_l="$(type -p docker)" && [ -n "$docker_l" ]; then
	alias dcu='docker compose up -d'
	alias dcd='docker compose down'
	alias dcpu='docker compose pull && docker compose up -d'
fi

# List directory after cd
function chpwd(){
	emulate -LR zsh
	l
}

# (Nearly) remove key timeout for escape
export KEYTIMEOUT=1

# History Control (Arrow up and down use already entered text)
bindkey "^[OA" history-beginning-search-backward
bindkey "^[OB" history-beginning-search-forward
# Same for k an j in vi mode
bindkey -M vicmd 'k' history-beginning-search-backward
bindkey -M vicmd 'j' history-beginning-search-forward
# Re-enable backspace button (overwrite vi mode behavior)
bindkey "^?" backward-delete-char
# Shift+Tab for backwards autocomplete navigation
bindkey -M menuselect '^[[Z' reverse-menu-complete
